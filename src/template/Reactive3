package template;

import java.util.List;
import java.util.HashMap;
import java.util.Random;

import logist.simulation.Vehicle;
import logist.agent.Agent;
import logist.behavior.ReactiveBehavior;
import logist.plan.Action;
import logist.plan.Action.Move;
import logist.plan.Action.Pickup;
import logist.task.Task;
import logist.task.TaskDistribution;
import logist.topology.Topology;
import logist.topology.Topology.City;

import java.util.HashSet;

public class Reactive3 implements ReactiveBehavior {

	private Random random;
	private double pPickup;
	private HashMap <String, pdState> stateMap= new HashMap<String, pdState> ();
	private HashMap <String, pdAction> actionMap= new HashMap<String, pdAction> ();
	private int cityNum;
	private List<City> cityList;
	private TaskDistribution TD;
	
	public void stateMapInit (List<City> cityList) {
		for (City current : cityList){
			pdState noPackage = new pdState(current);
			stateMap.put(noPackage.key, noPackage);
			for (City destine : cityList){
				if (destine.id != current.id){	
					pdState state = new pdState(current, destine);
					actionMap.put(key, state);
				}
			}
		}
	}
	
	public void actionMapInit (List<City> cityList) {
		for(City city : cityList) {
			pdAction actionA = new pdAction();
			pdAction actionB = new pdAction(city);
			actionMap.put(actionA.key, actionA);
			actionMap.put(actionB.key, actionB);
		}
	}
			
	public double Reward (pdState s, pdAction a) {
		double reward;
		double cost;
		double balance;
		
		City currentCity = s.currentCity;
		City destination = s.destineCity;
		
		if (s.ifPackage && a.iftake){                // package in currentCity and decide to take it
			reward = (double) TD.reward(currentCity, destination);
			cost = currentCity.distanceTo(destination) * 5;
			balance = reward - cost;
		}
		else{                                       // package in currentCity but decide not to take or no package in currentCity
			reward = 0;
			cost = currentCity.distanceTo(a.nextCity);
			balance = reward - cost;
		}
		return balance;
	}
	
	public double probility(pdState s, pdAction a){
		double probability;
		City currentCity = s.currentCity;
		City destination = s.destineCity;
		
		probability = TD.probability(currentCity, destination);
		return probability;
	}
	
	public void policyInit(Topology topology) {
		stateMapInit(cityList);
		actionMapInit(cityList);
		
		
	}
	@Override
	public void setup(Topology topology, TaskDistribution td, Agent agent) {

		// Reads the discount factor from the agents.xml file.
		// If the property is not present it defaults to 0.95
		Double discount = agent.readProperty("discount-factor", Double.class,
				0.95);

		this.random = new Random();
		this.pPickup = discount;
		this.cityNum = topology.cities().size();
		this.policyInit(topology);
		this.cityList = topology.cities();
		TD = td;
	}
	
	public City nextMove(City currentCity, pdAction a){
		City next;
		double quantity;
		double temp = 0;
		for (HashMap.Entry<String, pdState> state : stateMap.entrySet()){
			for (HashMap.Entry<String, pdAction> action : actionMap.entrySet()){
				for (HashMap.Entry<String, pdState> statePrime : stateMap.entrySet()){
					quantity = Reward(state.getValue(), action.getValue()) + dicount * probability() * ;
					if (quantity > temp)
						temp = quantity;
				}
			}
		}
		
		return next;
	}

	@Override
	public Action act(Vehicle vehicle, Task availableTask) {
		Action action;
		City currentCity = vehicle.getCurrentCity();

		
		City NC = nextMove(currentCity,);   // arriving a city without a package in possession
		
		
		
		if (availableTask == null || random.nextDouble() > pPickup) {
			//City currentCity = vehicle.getCurrentCity();
			action = new Move(currentCity.randomNeighbor(random));
		} else {
			action = new Pickup(availableTask);
		}
		return action;
	}
}
